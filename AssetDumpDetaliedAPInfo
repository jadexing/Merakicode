#Code runs this API: /organizations/{organizationId}/devices/statuses
#Full Org data dump on Inventory - IP addresses, tags and other.
# Twitter: @jamiegprice https://jamiegprice.substack.com/

import requests

BASE_URL = 'https://api.meraki.com/api/v1/'

def get_api_key():
    return input("Enter your Meraki API key: ")

def get_organizations(api_key):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + 'organizations', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_organizations(organizations):
    print("Organizations:")
    for idx, org in enumerate(organizations, 1):
        print(f"{idx}. {org['name']} (ID: {org['id']})")
    print()

def select_organization(organizations):
    if len(organizations) == 1:
        print(f"Only one organization found: {organizations[0]['name']} (ID: {organizations[0]['id']})")
        return organizations[0]['id']
    else:
        org_idx = int(input("Enter the number of the organization: "))
        return organizations[org_idx - 1]['id']

def get_device_statuses(api_key, org_id):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + f'organizations/{org_id}/devices/statuses', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_device_statuses(device_statuses):
    print("Device Statuses:")
    for device in device_statuses:
        print(f"Name: {device.get('name')}")
        print(f"Serial: {device.get('serial')}")
        print(f"MAC: {device.get('mac')}")
        print(f"Public IP: {device.get('publicIp')}")
        print(f"Network ID: {device.get('networkId')}")
        print(f"Status: {device.get('status')}")
        print(f"Last Reported At: {device.get('lastReportedAt')}")
        print(f"LAN IP: {device.get('lanIp')}")
        print(f"Gateway: {device.get('gateway')}")
        print(f"IP Type: {device.get('ipType')}")
        print(f"Primary DNS: {device.get('primaryDns')}")
        print(f"Secondary DNS: {device.get('secondaryDns')}")
        print(f"Product Type: {device.get('productType')}")
        if 'components' in device:
            components = device['components']
            if 'powerSupplies' in components:
                for ps in components['powerSupplies']:
                    print(f"  Power Supply Slot: {ps.get('slot')}")
                    print(f"  Power Supply Serial: {ps.get('serial')}")
                    print(f"  Power Supply Model: {ps.get('model')}")
                    print(f"  Power Supply Status: {ps.get('status')}")
                    if 'poe' in ps:
                        poe = ps['poe']
                        print(f"    PoE Unit: {poe.get('unit')}")
                        print(f"    PoE Maximum: {poe.get('maximum')}")
        print(f"Model: {device.get('model')}")
        print(f"Tags: {', '.join(device.get('tags', []))}")
        print()

def main():
    api_key = get_api_key()
    organizations = get_organizations(api_key)
    
    if not organizations:
        return
    
    display_organizations(organizations)
    selected_org_id = select_organization(organizations)
    
    device_statuses = get_device_statuses(api_key, selected_org_id)
    
    if device_statuses:
        display_device_statuses(device_statuses)
    else:
        print("No device statuses found.")

if __name__ == "__main__":
    main()
