#General Meraki Live AP and detail data dump to screen and spreadsheet.
###Jamieinbox - Wi-Fi Cool Cats https://jamiegprice.substack.com/ CWNE #510
"""
This code is designed to interact with the Meraki API to retrieve and display information about devices within an organization. Here's a breakdown of what it does:

Displays columns:
name	serial	mac	networkId	productType	model	address	lat	lng	notes	tags	lanIp	configurationUpdatedAt	firmware	url	details


Organizations API: https://api.meraki.com/api/v1/organizations
Devices API: https://api.meraki.com/api/v1/organizations/{org_id}/devices
"""
import requests
import pandas as pd

BASE_URL = 'https://api.meraki.com/api/v1/'

def get_api_key():
    return input("Enter your Meraki API key: ").strip()

def get_organizations(api_key):
    headers = {'X-Cisco-Meraki-API-Key': api_key}
    try:
        response = requests.get(BASE_URL + 'organizations', headers=headers)
        response.raise_for_status()
        organizations = response.json()
        return sorted(organizations, key=lambda x: x['name'].lower())  # Sort alphabetically
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def select_organization(organizations):
    if len(organizations) == 1:
        return organizations[0]['id']

    print("\nOrganizations:")
    for idx, org in enumerate(organizations, 1):
        print(f"{idx}. {org['name']} (ID: {org['id']})")

    while True:
        try:
            org_choice = int(input("\nEnter the number of your organization: "))
            if 1 <= org_choice <= len(organizations):
                return organizations[org_choice - 1]['id']
            else:
                print("Invalid selection. Please enter a valid number.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def get_devices(api_key, org_id):
    headers = {'X-Cisco-Meraki-API-Key': api_key}
    try:
        response = requests.get(BASE_URL + f'organizations/{org_id}/devices', headers=headers)
        response.raise_for_status()
        devices = response.json()
        return sorted(devices, key=lambda x: x.get('name', '').lower())  # Sort alphabetically
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_devices(devices):
    print("\nDevices:")
    for device in devices:
        print(f"Name: {device.get('name', 'Unknown')}, Serial: {device.get('serial', 'N/A')}, Model: {device.get('model', 'N/A')}")

def export_to_spreadsheet(devices):
    df = pd.DataFrame(devices)
    excel_filename = "meraki_devices.xlsx"
    df.to_excel(excel_filename, index=False)
    print(f"\nDevice data written to {excel_filename}")

def main():
    api_key = get_api_key()
    organizations = get_organizations(api_key)

    if organizations:
        selected_org_id = select_organization(organizations)
        devices = get_devices(api_key, selected_org_id)

        if devices:
            display_devices(devices)
            export_to_spreadsheet(devices)
        else:
            print("No devices found for the selected organization.")
    else:
        print("No organizations found.")

if __name__ == "__main__":
    main()
