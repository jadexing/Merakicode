#Get Network Wireless Client Connectivity Events
#/networks/{networkId}/wireless/clients/{clientId}/connectivityEvents
#List the wireless connectivity events for a client within a network in the timespan.
# EX: 
""
- Occurred At: 2024-10-25 17:40:51 MDT, Event Subtype: success, Event Type: dhcp, Severity: good, Duration: 0 ms, RSSI: 21 dBm, SSID: N/A
- Occurred At: 2024-10-25 17:40:52 MDT, Event Subtype: grabber, Event Type: roam, Severity: info, Duration: 15190 ms, RSSI: -1 dBm, SSID: N/A
- Occurred At: 2024-10-25 17:40:52 MDT, Event Subtype: success, Event Type: connection, Severity: good, Duration: 150 ms, RSSI: 22 dBm, SSID: N/A
- Occurred At: 2024-10-25 17:40:52 MDT, Event Subtype: success, Event Type: dns, Severity: good, Duration: 0 ms, RSSI: 22 dBm, SSID: N/A
- Occurred At: 2024-10-25 17:40:56 MDT, Event Subtype: None, Event Type: disassoc, Severity: info, Duration: -1 ms, RSSI: 5 dBm, SSID: N/A


This code is designed to interact with the Meraki API to retrieve and display wireless connectivity events for a specific client within a network. Here's a breakdown of what it does:

Get API Key: It prompts the user to enter their Meraki API key.
Get Organizations: It makes an API call to retrieve a list of organizations associated with the provided API key and sorts them alphabetically.
Display Organizations: It prints the list of organizations to the screen.
Select Organization: It prompts the user to select an organization from the list.
Get Networks: It makes another API call to retrieve a list of networks within the selected organization and sorts them alphabetically.
Display Networks: It prints the list of networks to the screen.
Select Network: It prompts the user to select a network from the list.
Get Clients: It retrieves a list of clients within the selected network.
Display Clients: It prints the list of clients to the screen.
Convert to MST: It converts timestamps from UTC to Mountain Standard Time (MST).
Get Connectivity Events: It retrieves the wireless connectivity events for a specific client within the selected network based on the provided timeframe.
Display Connectivity Events: It prints the connectivity events to the screen and saves them to an Excel spreadsheet.
Calculate Job Duration: It calculates and prints the duration of the job in minutes and seconds.
The API endpoints it uses are:

Organizations API: https://api.meraki.com/api/v1/organizations
Networks API: https://api.meraki.com/api/v1/organizations/{org_id}/networks
Clients API: https://api.meraki.com/api/v1/networks/{network_id}/clients
Connectivity Events API: https://api.meraki.com/api/v1/networks/{network_id}/wireless/clients/{client_id}/connectivityEvents
The code allows the user to select a timeframe for the connectivity events, such as the last week, last 24 hours, last 12 hours, or last 6 hours. It then retrieves and displays the events within that timeframe.
"""

import requests
import pandas as pd
from datetime import datetime, timedelta
import pytz

BASE_URL = 'https://api.meraki.com/api/v1/'

def get_api_key():
    return input("Enter your Meraki API key: ")

def get_organizations(api_key):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + 'organizations', headers=headers)
        response.raise_for_status()
        return sorted(response.json(), key=lambda x: x['name'])  # Sort organizations alphabetically
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_organizations(organizations):
    print("Organizations:")
    for idx, org in enumerate(organizations, 1):
        print(f"{idx}. {org['name']} (ID: {org['id']})")
    print()

def get_networks(api_key, org_id):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + f'organizations/{org_id}/networks', headers=headers)
        response.raise_for_status()
        return sorted(response.json(), key=lambda x: x['name'])  # Sort networks alphabetically
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_networks(networks):
    print("Networks:")
    for idx, network in enumerate(networks, 1):
        print(f"{idx}. {network['name']} (ID: {network['id']})")
    print()

def get_clients(api_key, network_id):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    all_clients = []
    per_page = 1000  # Maximum perPage value for the Meraki API
    starting_after = None

    while True:
        params = {
            'perPage': per_page,
            'startingAfter': starting_after,
        }
        try:
            response = requests.get(BASE_URL + f'networks/{network_id}/clients', headers=headers, params=params)
            response.raise_for_status()
            clients = response.json()
            if not clients:
                break

            all_clients.extend(clients)
            starting_after = clients[-1]['id']  # Set the next starting point
            if len(clients) < per_page:
                break
        except requests.exceptions.RequestException as e:
            print(f"Error occurred during API call: {e}")
            break

    return all_clients

def display_clients(clients):
    if not clients:
        print("No clients found.")
        return

    print("Clients:")
    for idx, client in enumerate(clients, 1):
        user = client.get('user', '-NoUsrName-')
        status = "Online" if client.get('status', '') == "Online" else "Offline"
        print(f"{idx}. Client ID: {client['id']}, MAC Address: {client['mac']}, Username: {user}, Status: {status}")

def convert_to_mst(timestamp):
    # Convert the ISO timestamp to UTC
    utc_time = datetime.fromisoformat(timestamp.replace("Z", "+00:00"))
    # Define MST timezone, accounting for Daylight Savings
    mst_tz = pytz.timezone('America/Denver')
    # Localize the UTC time to MST/MDT
    localized_time = utc_time.astimezone(mst_tz)
    # Return in string format
    return localized_time.strftime('%Y-%m-%d %H:%M:%S %Z')

def get_connectivity_events(api_key, network_id, client_id, params):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + f'networks/{network_id}/wireless/clients/{client_id}/connectivityEvents', headers=headers, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_connectivity_events(connectivity_events, network_id, client_id, start_time, end_time):
    if not connectivity_events:
        print("No connectivity events found.")
        return

    print(f"\nNetwork ID: {network_id}")
    print(f"Client ID: {client_id}")

    # Print current time, start, and end times
    current_time = datetime.now(pytz.timezone('America/Denver')).strftime('%Y-%m-%d %H:%M:%S %Z')
    print(f"This is the current time: {current_time}")
    
    event_data = []
    print("Connectivity Events:")
    for event in connectivity_events:
        occurred_at_mst = convert_to_mst(event.get('occurredAt', 'N/A'))  # Convert to MST
        event_data.append({
            'Occurred At (MST)': occurred_at_mst,  # MST timestamp
            'Event Subtype': event.get('subtype', 'N/A'),  # Event subtype
            'Event Type': event.get('type', 'N/A'),  # Event type
            'Description': event.get('description', 'N/A'),
            'SSID': event.get('ssid', 'N/A'),
            'Client MAC': event.get('clientMac', 'N/A'),
            'Severity': event.get('severity', 'N/A'),  # Event severity
            'Duration (ms)': event.get('durationMs', 'N/A'),  # Duration in milliseconds
            'RSSI': event.get('rssi', 'N/A'),  # RSSI recorded
        })
        # Display Occurred At, Event Subtype, and Event Type
        print(f"- Occurred At: {occurred_at_mst}, Event Subtype: {event.get('subtype', 'N/A')}, Event Type: {event.get('type', 'N/A')}, Severity: {event.get('severity', 'N/A')}, Duration: {event.get('durationMs', 'N/A')} ms, RSSI: {event.get('rssi', 'N/A')} dBm, SSID: {event.get('ssid', 'N/A')}")

    # Save to a DataFrame and then to a spreadsheet
    df = pd.DataFrame(event_data)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f'connectivity_events_{timestamp}.xlsx'
    df.to_excel(filename, index=False)
    print(f"Connectivity events saved to {filename}")

def get_time_taken(start_time):
    end_time = datetime.now()
    duration = end_time - start_time
    minutes = duration.seconds // 60
    seconds = duration.seconds % 60
    return minutes, seconds

def main():
    start_time = datetime.now()  # Start timer
    print("\n\n" + "Welcome to: Get Network Wireless Client Connectivity Events for a particular user/mac address.")
    api_key = get_api_key()
    organizations = get_organizations(api_key)

    if organizations:
        if len(organizations) == 1:
            selected_org_id = organizations[0]['id']
            print(f"Automatically selected organization: {organizations[0]['name']} (ID: {selected_org_id})")
        else:
            display_organizations(organizations)
            org_choice = int(input("Please enter the number of your organization: "))
            selected_org_id = organizations[org_choice - 1]['id']

        networks = get_networks(api_key, selected_org_id)

        if networks:
            display_networks(networks)
            network_choice = int(input("Please enter the number of your network: "))
            selected_network = networks[network_choice - 1]

            print(f"\nSelected Network: {selected_network['name']}")
            
            choice = input("Do you know the MAC address of the user? (yes/no): ").strip().lower()
            if choice == 'yes':
                mac_address = input("Please enter the MAC address in 11:22:33:44:55:66 notation: ")
                clients = get_clients(api_key, selected_network['id'])
                # Find the client with the given MAC address
                selected_client = next((client for client in clients if client['mac'].lower() == mac_address.lower()), None)
                if selected_client:
                    print(f"\nFound Client: {selected_client['id']}, MAC: {selected_client['mac']}")
                    # Prepare parameters for connectivity events API
                    params = {
                        'perPage': 1000,
                        'sortOrder': 'ascending',
                    }
                    # Prompt for timeframe selection
                    print("\nSelect a timeframe:")
                    print("1. Last week")
                    print("2. Last 24 hours")
                    print("3. Last 12 hours")
                    print("4. Last 6 hours")
                    timeframe_choice = int(input("Please enter your choice (1-4): "))
                    now = datetime.now()

                    if timeframe_choice == 1:
                        start_time_api = (now - timedelta(weeks=1)).strftime('%Y-%m-%dT%H:%M:%SZ')
                        end_time_api = now.strftime('%Y-%m-%dT%H:%M:%SZ')
                    elif timeframe_choice == 2:
                        start_time_api = (now - timedelta(days=1)).strftime('%Y-%m-%dT%H:%M:%SZ')
                        end_time_api = now.strftime('%Y-%m-%dT%H:%M:%SZ')
                    elif timeframe_choice == 3:
                        start_time_api = (now - timedelta(hours=12)).strftime('%Y-%m-%dT%H:%M:%SZ')
                        end_time_api = now.strftime('%Y-%m-%dT%H:%M:%SZ')
                    elif timeframe_choice == 4:
                        start_time_api = (now - timedelta(hours=6)).strftime('%Y-%m-%dT%H:%M:%SZ')
                        end_time_api = now.strftime('%Y-%m-%dT%H:%M:%SZ')
                    else:
                        print("Invalid choice. Exiting.")
                        return

                    # Print current time, start, and end times
                    print(f"Data Collection Start Time (UTC): {start_time_api} | (MST): {convert_to_mst(start_time_api)}")
                    print(f"Data Collection End Time (UTC): {end_time_api} | (MST): {convert_to_mst(end_time_api)}")

                    connectivity_events = get_connectivity_events(api_key, selected_network['id'], selected_client['id'], params)
                    display_connectivity_events(connectivity_events, selected_network['id'], selected_client['id'], start_time_api, end_time_api)

                else:
                    print("Client not found.")
            else:
                print("Exiting. Please provide a MAC address to continue.")
        else:
            print("No networks found in the selected organization.")
    else:
        print("No organizations found.")

    minutes, seconds = get_time_taken(start_time)
    print(f"Job Completed in {minutes} minutes and {seconds} seconds.")

if __name__ == '__main__':
    main()
