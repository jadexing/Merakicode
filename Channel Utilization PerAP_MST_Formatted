"""This script is designed to interact with the Meraki API to pull channel utilization data for specified access points (APs) within a network. It converts the data to Mountain Standard Time (MST) and formats it nicely into an Excel spreadsheet. Here's a breakdown of what it does:

Get API Key: It prompts the user to enter their Meraki API key.
Get Organizations: It makes an API call to retrieve a list of organizations associated with the provided API key.
Display Organizations: It prints the list of organizations to the screen.
Select Organization: It prompts the user to select an organization from the list.
Get Networks: It makes another API call to retrieve a list of networks within the selected organization.
Display Networks: It prints the list of networks to the screen, sorted alphabetically by their names.
Select Network: It prompts the user to select a network from the list.
Get Access Points: For the selected network, it retrieves the list of devices and filters out the access points (APs).
Display Access Points: It prints the details of each access point (name and serial number) to the screen, sorted alphabetically by their names.
Select APs: It prompts the user to select the APs to run the utilization API against.
Get Channel Utilization: For each selected AP, it retrieves the channel utilization data.
Save Data to Excel: It saves the channel utilization data into an Excel spreadsheet using pandas.
Convert UTC to MST: It converts the timestamps from UTC to Mountain Standard Time (MST).
Process and Reformat Data: It processes and reformats the saved Excel file to organize the data.
Calculate Job Duration: It calculates and prints the duration of the job in minutes and seconds.

Therefore, these timestamps cover a total of 23 hours and 50 minutes.
"""

#Script pulls data per requested AP. It puts in in MST time, and nicely formats the data.
#Channel Utilization- API networks/{network_id}/networkHealth/channelUtilization
#https://jamiegprice.substack.com/about #CWNE 510

#working on fixing.

import requests
import datetime
import pandas as pd
import time  # For managing delays between requests
import pytz
import ast
import os

BASE_URL = 'https://api.meraki.com/api/v1/'

def get_api_key():
    return input("Enter your Meraki API key: ")

def get_organizations(api_key):
    headers = {'X-Cisco-Meraki-API-Key': api_key}
    try:
        response = requests.get(BASE_URL + 'organizations', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_organizations(organizations):
    print("Organizations:")
    for idx, org in enumerate(organizations, 1):
        print(f"{idx}. {org['name']} (ID: {org['id']})")
    print()

def select_organization(organizations):
    if len(organizations) == 1:
        print(f"Only one organization found: {organizations[0]['name']} (ID: {organizations[0]['id']})")
        return organizations[0]['id']
    else:
        while True:
            try:
                org_idx = int(input("Enter the number of the organization: ")) - 1
                if 0 <= org_idx < len(organizations):
                    return organizations[org_idx]['id']
                else:
                    print("Invalid choice, please try again.")
            except ValueError:
                print("Invalid input, please enter a number.")

def get_networks(api_key, org_id):
    headers = {'X-Cisco-Meraki-API-Key': api_key}
    try:
        response = requests.get(BASE_URL + f'organizations/{org_id}/networks', headers=headers)
        response.raise_for_status()
        networks = response.json()
        networks.sort(key=lambda x: x['name'])  # Sort networks alphabetically
        return networks
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_networks(networks):
    print("Networks:")
    for idx, network in enumerate(networks, 1):
        print(f"{idx}. {network['name']} (ID: {network['id']})")
    print()

def select_network(networks):
    while True:
        choice = input("Enter the number of the network to select (or 'q' to quit): ")
        if choice.lower() == 'q':
            return None
        try:
            net_idx = int(choice) - 1
            if 0 <= net_idx < len(networks):
                return networks[net_idx]['id']
            else:
                print("Invalid choice, please try again.")
        except ValueError:
            print("Invalid input, please enter a number.")

def get_access_points(api_key, network_id):
    headers = {'X-Cisco-Meraki-API-Key': api_key}
    all_access_points = []
    url = BASE_URL + f'networks/{network_id}/devices'
    
    while url:
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            access_points = response.json()
            
            if isinstance(access_points, list):
                print(f"Fetched {len(access_points)} access points from {url}")
                all_access_points.extend(access_points)
                
                # No pagination for this endpoint; exit loop
                break
            
            else:
                print(f"Unexpected response format: {access_points}")
                break

        except requests.exceptions.RequestException as e:
            print(f"Error occurred during API call: {e}")
            break
    
    return all_access_points

def get_channel_utilization(api_key, network_id, ap_serial):
    headers = {'X-Cisco-Meraki-API-Key': api_key}
    url = BASE_URL + f'networks/{network_id}/networkHealth/channelUtilization'
    all_data = []
    
    try:
        response = requests.get(url, headers=headers, params={'serial': ap_serial})
        response.raise_for_status()
        data = response.json()
        
        if isinstance(data, list):
            print(f"Fetched {len(data)} data entries for AP {ap_serial}")
            all_data.extend(data)
        else:
            print(f"Unexpected response format for AP {ap_serial}: {data}")
        
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call for AP {ap_serial}: {e}")
        if e.response is not None:
            print(f"Response content: {e.response.content}")
    
    return all_data

def save_to_excel(data):
    df = pd.DataFrame(data)
    if 'AP Name' not in df.columns:
        df['AP Name'] = 'Unknown AP'  # Ensure 'AP Name' column exists
    df = df[['AP Name'] + [col for col in df.columns if col != 'AP Name']]  # Reorder columns to make AP Name first
    filename = 'TempCoolCats.xlsx'
    df.to_excel(filename, index=False)
    print(f"Data saved to {filename}")

def convert_utc_to_denver(utc_time_str):
    try:
        # Convert UTC to datetime object
        utc_time = datetime.datetime.strptime(utc_time_str, "%Y-%m-%dT%H:%M:%SZ")
        # Define timezone objects
        utc_zone = pytz.utc
        denver_zone = pytz.timezone('America/Denver')
        # Localize the UTC time to the UTC timezone
        utc_time = utc_zone.localize(utc_time)
        # Convert to Denver time
        denver_time = utc_time.astimezone(denver_zone)
        return denver_time.strftime("%Y-%m-%dT%H:%M:%S")
    except ValueError as e:
        print(f"Error converting time {utc_time_str}: {e}")
        return utc_time_str

def process_file(filename):
    # Load the Excel file
    df = pd.read_excel(filename)

    # Check if the DataFrame is empty
    if df.empty:
        print("The file is empty.")
        return

    # Drop the first row
    df = df.iloc[1:].reset_index(drop=True)

    # Define expected columns and their new names
    expected_columns = {
        0: 'AP Name',
        4: 'Utilization',
        5: 'Wifi',
        6: 'Non Wifi'
    }

    # Check if expected columns exist in the DataFrame
    columns_to_keep = {}
    for idx, new_col_name in expected_columns.items():
        if idx < len(df.columns):
            columns_to_keep[df.columns[idx]] = new_col_name
        else:
            print(f"Warning: Expected column index {idx} does not exist in the DataFrame.")
    
    if not columns_to_keep:
        print("No valid columns found to keep. Exiting the process.")
        return
    
    df = df[list(columns_to_keep.keys())]
    df = df.rename(columns=columns_to_keep)

    # Create a new DataFrame to store the organized data
    organized_data = []

    # Iterate through each row
    for _, row in df.iterrows():
        ap_name = row.get('AP Name', 'Unknown AP')
        data_list_str = row.get('Utilization', '')  # Assuming 'Utilization' contains the list of data dictionaries

        # Check the type of data_list_str and handle accordingly
        if isinstance(data_list_str, str):
            try:
                # Safely parse the string into a list of dictionaries
                data_list = ast.literal_eval(data_list_str)
                if not isinstance(data_list, list):
                    print(f"Expected list but got {type(data_list)}. Data: {data_list}")
                    continue
            except (SyntaxError, ValueError) as e:
                print(f"Error parsing data_list from string: {e}")
                print(f"Data string: {data_list_str}")
                continue
        else:
            print(f"Unexpected type for data_list: {type(data_list_str)}. Data: {data_list_str}")
            continue

        # Flatten the list of dictionaries
        for data in data_list:
            # Convert timestamps
            start_ts = convert_utc_to_denver(data.get('start_ts', ''))
            end_ts = convert_utc_to_denver(data.get('end_ts', ''))

            # Collect data in a flat structure
            organized_data.append({
                'AP Name': ap_name,
                'Utilization': data.get('utilization', ''),
                'Wifi': data.get('wifi', ''),
                'Non Wifi': data.get('non_wifi', ''),
                'Start Timestamp': start_ts,
                'End Timestamp': end_ts
            })

    # Convert to DataFrame
    organized_df = pd.DataFrame(organized_data)

    # Save to new file with timestamp
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    new_filename = f"NetworkUtilization_Organized_{timestamp}.xlsx"
    organized_df.to_excel(new_filename, index=False)
    print(f"Organized data saved to {new_filename}")

def main():
    start_time = datetime.datetime.now()

    api_key = get_api_key()
    organizations = get_organizations(api_key)
    if not organizations:
        return
    display_organizations(organizations)

    selected_org_id = select_organization(organizations)

    networks = get_networks(api_key, selected_org_id)
    if not networks:
        return
    display_networks(networks)

    selected_network_id = select_network(networks)
    if not selected_network_id:
        return

    access_points = get_access_points(api_key, selected_network_id)
    access_points.sort(key=lambda x: x['name'])  # Sort APs alphabetically
    print("Access Points:")
    for idx, ap in enumerate(access_points, 1):
        print(f"{idx}. {ap['name']} (Serial: {ap['serial']})")
    print()

    selected_aps = input("Enter the index numbers of the APs to run the utilization API against, separated by commas: ")
    selected_ap_indices = [int(idx.strip()) - 1 for idx in selected_aps.split(',') if idx.strip().isdigit()]

    all_data = []
    for idx in selected_ap_indices:
        if 0 <= idx < len(access_points):
            ap_serial = access_points[idx]['serial']
            ap_name = access_points[idx]['name']
            data = get_channel_utilization(api_key, selected_network_id, ap_serial)
            for entry in data:
                entry['AP Name'] = ap_name  # Add AP Name to each data entry
            all_data.extend(data)
        else:
            print(f"Invalid AP index: {idx + 1}")

    if all_data:
        save_to_excel(all_data)

    # Process and reformat the saved Excel file
    process_file('TempCoolCats.xlsx')

    end_time = datetime.datetime.now()
    elapsed_time = end_time - start_time
    print(f"Job completed in {elapsed_time.seconds // 60} minutes and {elapsed_time.seconds % 60} seconds.")

if __name__ == "__main__":
    main()
