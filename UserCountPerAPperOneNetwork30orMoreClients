#User count per AP above 30 clients- per network, per AP.

import requests

BASE_URL = 'https://api.meraki.com/api/v1/'

def get_api_key():
    return input("Please enter your Meraki API key: ")

def get_organizations(api_key):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + 'organizations', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_organizations(organizations):
    print("Organizations:")
    for idx, org in enumerate(organizations, 1):
        print(f"{idx}. {org['name']} (ID: {org['id']})")
    print()

def select_organization(organizations):
    if len(organizations) == 1:
        print(f"Only one organization found: {organizations[0]['name']} (ID: {organizations[0]['id']})")
        return organizations[0]['id']
    else:
        org_idx = int(input("Enter the number of the organization: "))
        return organizations[org_idx - 1]['id']

def get_networks(api_key, org_id):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + f'organizations/{org_id}/networks', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_networks(networks):
    print("Networks:")
    for idx, network in enumerate(networks, 1):
        print(f"{idx}. {network['name']} (ID: {network['id']})")
    print()

def get_access_points(api_key, network_id):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + f'networks/{network_id}/devices', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def get_clients_per_ap(api_key, network_id):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + f'networks/{network_id}/devices', headers=headers)
        response.raise_for_status()
        devices_data = response.json()
        ap_clients = {}  # Dictionary to store AP name and client count

        print("Retrieving client count per AP for the last 5 minutes for 30 or more clients. Please wait.")  # Status message

        # Retrieve clients for each AP for the last 5 minutes
        for device in devices_data:
            if device["model"].startswith("MR") or device["model"].startswith("CW"):  # Filter APs
                ap_name = device["name"]
                ap_url = f"https://api.meraki.com/api/v1/devices/{device['serial']}/clients?timespan=300"
                ap_response = requests.get(ap_url, headers=headers)
                if ap_response.status_code == 200:
                    ap_clients_data = ap_response.json()
                    client_count = len(ap_clients_data)
                    if client_count >= 30:
                        ap_clients[ap_name] = client_count

        # Display results in descending order
        sorted_clients = sorted(ap_clients.items(), key=lambda x: x[1], reverse=True)
        print("\nClient count per AP for the last 5 minutes (descending order) with 30 or more clients:")
        for ap_name, client_count in sorted_clients:
            print(f"{ap_name}: {client_count} clients")

    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")

def main():
    api_key = get_api_key()
    organizations = get_organizations(api_key)
    display_organizations(organizations)

    selected_org_id = select_organization(organizations)

    networks = get_networks(api_key, selected_org_id)
    display_networks(networks)

    network_idx = int(input("Enter the number of the network: "))
    selected_network_id = networks[network_idx - 1]['id']

    access_points = get_access_points(api_key, selected_network_id)
    # display_access_points(access_points)

    get_clients_per_ap(api_key, selected_network_id)

if __name__ == "__main__":
    main()
