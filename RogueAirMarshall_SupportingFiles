"""
This code leverages the Cisco Meraki API to retrieve rogue device data from Meraki networks and produces both a summarized 
text report and a CSV file with MAC address counts and rogue device details. Below is a breakdown of the APIs and a summary of the code functionality.

APIs in Use
GET /organizations
GET /organizations/{organizationId}/networks
GET /networks/{networkId}/wireless/airMarshal

CSV File: Saves a summarized CSV file (Summarized_Data_<timestamp>.csv) that excludes BSSID data, with details about each rogue device and the total MAC address count per network.
Text Summary Report: Generates a text report (Identified_Rogues_Summarized_<timestamp>.txt) summarizing each rogue device (again omitting BSSID data), the MAC address count, and network details.
Job Duration Reporting: timestamp.

#Twitter @jamiegprice https://jamiegprice.substack.com/

"""



import requests
import datetime
import csv
import os
from collections import Counter

BASE_URL = 'https://api.meraki.com/api/v1/'

def get_api_key():
    return input("Enter your Meraki API key: ")

def get_organizations(api_key):
    headers = {'X-Cisco-Meraki-API-Key': api_key}
    try:
        response = requests.get(BASE_URL + 'organizations', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_organizations(organizations):
    print("Organizations:")
    for idx, org in enumerate(organizations):
        print(f"{idx}. {org['name']} (ID: {org['id']})")
    print()

def select_organization(organizations):
    if len(organizations) == 1:
        print(f"Only one organization found: {organizations[0]['name']} (ID: {organizations[0]['id']})")
        return organizations[0]['id']
    else:
        org_idx = int(input("Enter the number of the organization: "))
        return organizations[org_idx]['id']

def get_networks(api_key, org_id):
    headers = {'X-Cisco-Meraki-API-Key': api_key}
    try:
        response = requests.get(BASE_URL + f'organizations/{org_id}/networks', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_networks(networks):
    print("Networks:")
    sorted_networks = sorted(networks, key=lambda x: x['name'].lower())
    for idx, network in enumerate(sorted_networks):
        print(f"{idx}. {network['name']} (ID: {network['id']})")
    print()
    return sorted_networks

def select_network(networks):
    network_input = input("Please Enter the number of the network, or <Enter> for all networks: ")
    if network_input == "":
        return [network['id'] for network in networks]
    else:
        network_idx = int(network_input)
        return [networks[network_idx]['id']]

def get_air_marshal_data(api_key, network_id):
    headers = {'X-Cisco-Meraki-API-Key': api_key}
    try:
        response = requests.get(BASE_URL + f'networks/{network_id}/wireless/airMarshal', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def time_ago(timestamp):
    if not timestamp:
        return "Unknown"
    if isinstance(timestamp, int):
        timestamp = datetime.datetime.utcfromtimestamp(timestamp)
    now = datetime.datetime.utcnow()
    diff = now - timestamp
    seconds = int(diff.total_seconds())
    if seconds < 60:
        return f"{seconds} seconds ago"
    elif seconds < 3600:
        return f"{seconds // 60} minutes ago"
    elif seconds < 86400:
        return f"{seconds // 3600} hours ago"
    elif seconds < 31536000:
        return f"{seconds // 86400} days ago"
    else:
        return f"{seconds // 31536000} years ago"

def save_to_csv(all_data):
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    csv_filename = f"Summarized_Data_{timestamp}.csv"
    file_exists = os.path.isfile(csv_filename)
    
    # Exclude 'bssids' field
    filtered_data = [{k: v for k, v in entry.items() if k != 'bssids'} for entry in all_data]

    with open(csv_filename, 'a', newline='', encoding='utf-8') as csv_file:
        fieldnames = ['Network Name'] + list(filtered_data[0].keys())
        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
        
        if not file_exists:
            writer.writeheader()
            
        for entry in filtered_data:
            writer.writerow(entry)
    
    print(f"\nSummarized data saved to {csv_filename}")

def save_mac_counts(mac_counts):
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    csv_filename = f"Mac_Counts_{timestamp}.csv"
    with open(csv_filename, 'w', newline='', encoding='utf-8') as csv_file:
        writer = csv.writer(csv_file)
        writer.writerow(["Network Name", "Wired MAC Count"])
        for network_name, count in mac_counts.items():
            writer.writerow([network_name, count])
    print(f"MAC count summary saved to {csv_filename}")

def save_summary_text_file(mac_counts, all_data):
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    summary_filename = f"Identified_Rogues_Summarized_{timestamp}.txt"
    with open(summary_filename, 'w', encoding='utf-8') as file:
        file.write("Rogue Summary Report\n")
        file.write(f"Date and Time: {timestamp}\n")
        file.write("MAC Address Count:\n\n")
        for network_name, count in mac_counts.items():
            file.write(f"Network Name: {network_name}\n")
            file.write(f"MAC Count: {count}\n")
            file.write("-" * 50 + "\n")

        file.write("\nDetailed Rogue Data (excluding BSSIDs):\n\n")
        for entry in all_data:
            file.write(f"Network Name: {entry['Network Name']}\n")
            for key, value in entry.items():
                if key != "bssids":  # Exclude bssid data
                    file.write(f"{key}: {value}\n")
            file.write("-" * 50 + "\n")
    print(f"Summary text file saved to {summary_filename}")

def display_mac_counts(mac_counts):
    print("\nWired MAC Counts by Network:")
    for network_name, count in mac_counts.items():
        print(f"{network_name}: {count}")

def main():
    start_time = datetime.datetime.now()
    api_key = get_api_key()
    organizations = get_organizations(api_key)
    if not organizations:
        return
    display_organizations(organizations)
    selected_org_id = select_organization(organizations)
    networks = get_networks(api_key, selected_org_id)
    if not networks:
        return
    sorted_networks = display_networks(networks)
    selected_network_ids = select_network(sorted_networks)

    all_data = []
    mac_counter = Counter()

    for network_id in selected_network_ids:
        air_marshal_data = get_air_marshal_data(api_key, network_id)
        network_name = next(network['name'] for network in sorted_networks if network['id'] == network_id)
        
        filtered_data = [entry for entry in air_marshal_data if entry.get("wiredMacs")]
        for entry in filtered_data:
            entry["Network Name"] = network_name
            entry["lastSeen"] = time_ago(entry.get("lastSeen"))
            entry["firstSeen"] = time_ago(entry.get("firstSeen"))
            entry["wiredLastSeen"] = time_ago(entry.get("wiredLastSeen"))
            all_data.append(entry)
            mac_counter[network_name] += len(entry.get("wiredMacs", []))
            
            # Print each entry to the terminal
            print(f"\nData for Network '{network_name}':")
            for key, value in entry.items():
                print(f"{key}: {value}")
            print("-" * 50)

    save_to_csv(all_data)
    save_mac_counts(mac_counter)
    save_summary_text_file(mac_counter, all_data)
    display_mac_counts(mac_counter)

    end_time = datetime.datetime.now()
    duration = end_time - start_time
    print(f"\nJob completed in {duration.total_seconds() / 60:.2f} minutes.")

if __name__ == "__main__":
    main()
