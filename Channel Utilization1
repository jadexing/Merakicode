"""
Workflow
Start the Script:
Run the script and provide your Meraki API key.
Select Organization:
If multiple organizations exist, pick one from the list.
Select Network:
Choose the network from an alphabetically sorted list.
Data Retrieval:
The script fetches channel utilization data for all APs in the network in batches.
Displays each batch of records in the terminal as they are retrieved.
Excel Output:
Data is saved to an Excel file named ChannelUtilization_{network_name}_{timestamp}.xlsx with AP Name as the first column.
"""

import requests
import pandas as pd
import time
from datetime import datetime

BASE_URL = 'https://api.meraki.com/api/v1/'


def get_api_key():
    return input("Enter your Meraki API key: ")


def get_organizations(api_key):
    headers = {'X-Cisco-Meraki-API-Key': api_key}
    response = requests.get(BASE_URL + 'organizations', headers=headers)
    response.raise_for_status()
    return response.json()


def select_organization(organizations):
    if len(organizations) == 1:
        print(f"Auto-selecting organization: {organizations[0]['name']}")
        return organizations[0]['id']
    else:
        print("Organizations:")
        for idx, org in enumerate(organizations, 1):
            print(f"{idx}. {org['name']}")
        while True:
            try:
                selection = int(input("Select an organization: ")) - 1
                if 0 <= selection < len(organizations):
                    return organizations[selection]['id']
            except ValueError:
                print("Invalid input. Please try again.")


def get_networks(api_key, org_id):
    headers = {'X-Cisco-Meraki-API-Key': api_key}
    response = requests.get(BASE_URL + f'organizations/{org_id}/networks', headers=headers)
    response.raise_for_status()
    networks = response.json()
    return sorted(networks, key=lambda x: x['name'])


def select_network(networks):
    print("Networks:")
    for idx, network in enumerate(networks, 1):
        print(f"{idx}. {network['name']}")
    while True:
        try:
            selection = int(input("Select a network: ")) - 1
            if 0 <= selection < len(networks):
                return networks[selection]['id'], networks[selection]['name']
        except ValueError:
            print("Invalid input. Please try again.")


def get_channel_utilization(api_key, network_id):
    headers = {'X-Cisco-Meraki-API-Key': api_key}
    url = BASE_URL + f'networks/{network_id}/networkHealth/channelUtilization'
    all_data = []
    params = {'perPage': 10}  # Batch size
    print("Fetching channel utilization data. This may take time, please wait...")
    while True:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        batch = response.json()
        all_data.extend(batch)

        # Display records for the current batch
        print(f"Retrieved {len(batch)} records:")
        for record in batch:
            print(record)

        if 'next' in response.links:  # Check for pagination
            params['startingAfter'] = response.links['next']['url'].split('startingAfter=')[1]
            time.sleep(2)  # Pause to avoid rate limits
        else:
            break
    return all_data


def save_to_excel(data, network_name):
    filename = f"ChannelUtilization_{network_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    df = pd.DataFrame(data)
    df.to_excel(filename, index=False)
    print(f"Data saved to {filename}")


def main():
    try:
        api_key = get_api_key()
        organizations = get_organizations(api_key)
        if not organizations:
            print("No organizations found. Exiting.")
            return

        org_id = select_organization(organizations)
        networks = get_networks(api_key, org_id)
        if not networks:
            print("No networks found. Exiting.")
            return

        network_id, network_name = select_network(networks)
        print("Working on gathering data. Depending on the size of the network, this could take time.")

        start_time = time.time()
        data = get_channel_utilization(api_key, network_id)
        end_time = time.time()

        if not data:
            print("No data found for the selected network.")
        else:
            print(f"\nData retrieval completed in {end_time - start_time:.2f} seconds.")
            save_to_excel(data, network_name)

    except requests.exceptions.RequestException as e:
        print(f"API Error: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    main()
