#Please note until I find a way to fix this, this data is missing WirelessCapabilities and OS for clients. Please use the "UerDataDump" to get that data.
#Created by Jamie Price- Wi-Fi Cool Cats and ChatGPT. 08082023

import requests
import pandas as pd
from datetime import datetime

def get_api_key():
    return input("Please enter your Meraki API key: ")

def get_organizations(api_key):
    url = "https://api.meraki.com/api/v1/organizations"
    headers = {"X-Cisco-Meraki-API-Key": api_key}

    response = requests.get(url, headers=headers)
    response.raise_for_status()

    return response.json()

def get_networks(api_key, org_id):
    url = f"https://api.meraki.com/api/v1/organizations/{org_id}/networks"
    headers = {"X-Cisco-Meraki-API-Key": api_key}
    networks = []

    while url:
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        data = response.json()
        networks.extend(data)

        if 'next' in response.links:
            url = response.links['next']['url']
        else:
            url = None

    return networks

def get_clients(api_key, network_id):
    url = f"https://api.meraki.com/api/v1/networks/{network_id}/clients"
    headers = {"X-Cisco-Meraki-API-Key": api_key}
    clients = []

    while url:
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        data = response.json()
        clients.extend(data)

        if 'next' in response.links:
            url = response.links['next']['url']
        else:
            url = None

    return clients

def main():
    try:
        api_key = get_api_key()
        organizations = get_organizations(api_key)

        print("Numbered list of organizations:")
        for idx, org in enumerate(organizations, 1):
            print(f"{idx}. {org['name']}")

        org_choice = int(input("Please enter the number of the organization you want to choose: "))
        selected_org_id = organizations[org_choice - 1]['id']

        print("Fetching networks...")
        networks = get_networks(api_key, selected_org_id)

        print("Numbered list of networks:")
        for idx, network in enumerate(networks, 1):
            print(f"{idx}. {network['name']}")

        network_choice = int(input("Please enter the number of the network you want to check clients for (please be patient, this may take some time): "))
        selected_network_id = networks[network_choice - 1]['id']

        print(f"Fetching clients for network: {networks[network_choice - 1]['name']}...")
        clients = get_clients(api_key, selected_network_id)

        print("Please see export:")
        all_clients_data = []
        for client in clients:
            client_name = client['description'] if client['description'] is not None else "None"
            client_data = {
                'Client Name': client_name,
                'Client ID': client['id'],
                'MAC Address': client['mac'],
                'IP Address': client.get('ip', 'N/A'),
                'IP6 Address': client.get('ip6', 'N/A'),
                'First Seen': client['firstSeen'],
                'Last Seen': client['lastSeen'],
                'Manufacturer': client.get('manufacturer', 'N/A'),
                'OS': client.get('os', 'N/A'),
                'User': client.get('user', 'N/A'),
                'VLAN': client.get('vlan', 'N/A'),
                'SSID': client.get('ssid', 'N/A'),
                'Wireless Capabilities': client.get('wirelessCapabilities', 'N/A'),
                'SM Installed': client.get('smInstalled', 'N/A'),
                'Recent Device MAC': client.get('recentDeviceMac', 'N/A'),
                'Client VPN Connections': client.get('clientVpnConnections', 'N/A'),
                'LLDP': client.get('lldp', 'N/A'),
                'CDP': client.get('cdp', 'N/A'),
                'Status': client.get('status', 'N/A'),
            }
            all_clients_data.append(client_data)

        # Save data to an Excel file with today's date and time in the filename
        now = datetime.now()
        date_time = now.strftime("%Y-%m-%d_%H-%M-%S")
        excel_filename = f"{networks[network_choice - 1]['name']}_{date_time}_clients_with_info.xlsx"
        df = pd.DataFrame(all_clients_data)
        df.to_excel(excel_filename, index=False)
        print(f"Client information has been saved to {excel_filename}.")

    except requests.exceptions.HTTPError as errh:
        print("Http Error:", errh)
    except requests.exceptions.ConnectionError as errc:
        print("Error Connecting:", errc)
    except requests.exceptions.Timeout as errt:
        print("Timeout Error:", errt)
    except requests.exceptions.RequestException as err:
        print("OOps: Something Else", err)

if __name__ == "__main__":
    main()
