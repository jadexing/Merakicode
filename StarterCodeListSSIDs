#This code uses the Meraki API to retrieve and list network and SSID information for a selected Meraki organization. It specifically calls three Meraki API endpoints:
#organizations: This endpoint retrieves a list of all organizations associated with the API key provided by the user.
#/organizations/{organizationId}/networks: This endpoint fetches all networks within a specified organization.
#/networks/{networkId}/wireless/ssids: This endpoint retrieves a list of SSIDs for a particular network, including details such as SSID name, enabled status, authentication mode, and RADIUS server details (if applicable).

"""
The program's main functionality:

Prompts the user for a Meraki API key, retrieves organizations, and allows the user to select one.
Fetches networks within the chosen organization, displaying them in alphabetical order.
Prompts the user to filter SSIDs based on enabled status and the presence of RADIUS servers.
Collects and displays the SSID information based on these filters.
Saves the SSID data into an Excel file (meraki_ssid_configurations.xlsx), including columns for network name, network ID, SSID number, SSID name, enabled status, authentication mode, and RADIUS server IP addresses.
This program is useful for network administrators who need to audit and manage SSIDs across multiple networks within a Meraki organization.
"""


import requests
import datetime
import openpyxl

BASE_URL = 'https://api.meraki.com/api/v1/'

def get_api_key():
    api_key = input("Enter your Meraki API key (or 'q' to quit): ").strip()
    if api_key.lower() == 'q':
        quit_program()
    return api_key

def get_organizations(api_key):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + 'organizations', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_organizations(organizations):
    print("Organizations:")
    for idx, org in enumerate(organizations, 1):
        print(f"{idx}. {org['name']} (ID: {org['id']})")
    print()

def select_organization(organizations):
    if len(organizations) == 1:
        print(f"Only one organization found: {organizations[0]['name']} (ID: {organizations[0]['id']})")
        return organizations[0]['id']
    else:
        org_idx = input("Enter the number of the organization (or 'q' to quit): ").strip()
        if org_idx.lower() == 'q':
            quit_program()
        return organizations[int(org_idx) - 1]['id']

def get_networks(api_key, org_id):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + f'organizations/{org_id}/networks', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_networks(networks):
    print("Networks:")
    sorted_networks = sorted(networks, key=lambda x: x['name'].lower())
    for idx, network in enumerate(sorted_networks, 1):
        print(f"{idx}. {network['name']} (ID: {network['id']})")
    print()
    return sorted_networks

def select_network_by_name(networks):
    network_name = input("Enter the name of the network you want to modify (or 'q' to quit): ").strip()
    if network_name.lower() == 'q':
        quit_program()
    selected_network = next((network for network in networks if network['name'].lower() == network_name.lower()), None)
    if selected_network:
        return selected_network
    else:
        print("Invalid network name selected.")
        return None

def get_network_ssids(api_key, network_id):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + f'networks/{network_id}/wireless/ssids', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_and_save_ssids(networks, api_key, show_only_enabled, show_only_radius):
    # Create a new Excel workbook and sheet
    workbook = openpyxl.Workbook()
    sheet = workbook.active
    sheet.title = "SSID Configurations"
    
    # Add headers to the sheet
    sheet.append(["Network Index", "Network Name", "Network ID", "SSID Number", "SSID Name", "SSID Enabled", "Authentication Mode", "RADIUS Server IP/FQDN"])
    
    for network_index, network in enumerate(networks, 1):
        ssids = get_network_ssids(api_key, network['id'])
        print(f"{network_index}. SSIDs for network '{network['name']}' (ID: {network['id']}):")
        
        for ssid in ssids:
            # Check if SSID should be included based on enabled status and RADIUS server presence
            if (not show_only_enabled or ssid['enabled']) and (not show_only_radius or (ssid['authMode'] == '8021x-radius' and 'radiusServers' in ssid)):
                radius_ips = []
                
                if ssid['authMode'] == '8021x-radius' and 'radiusServers' in ssid:
                    for server in ssid['radiusServers']:
                        radius_ips.append(server['host'])
                
                radius_ips_str = ", ".join(radius_ips)
                
                print(f" - SSID Number: {ssid['number']}")
                print(f"   SSID Name: {ssid['name']}")
                print(f"   Enabled: {ssid['enabled']}")
                print(f"   Auth Mode: {ssid['authMode']}")
                print(f"   RADIUS Servers: {radius_ips_str}")
                print()
                
                # Save the details to the spreadsheet
                sheet.append([
                    network_index,
                    network['name'],
                    network['id'],
                    ssid['number'],
                    ssid['name'],
                    ssid['enabled'],
                    ssid['authMode'],
                    radius_ips_str
                ])
    
    # Save the workbook to a file
    workbook.save("meraki_ssid_configurations.xlsx")
    print("SSID configurations have been saved to 'meraki_ssid_configurations.xlsx'.")

def quit_program():
    print("Great! Have a good day.")
    exit()

def main():
    while True:
        api_key = get_api_key()
        organizations = get_organizations(api_key)
        if not organizations:
            return
        display_organizations(organizations)
        selected_org_id = select_organization(organizations)
        networks = get_networks(api_key, selected_org_id)
        if not networks:
            return
        sorted_networks = display_networks(networks)
        
        # Ask the user if they want to view only enabled SSIDs
        show_only_enabled = input("Do you want to view only enabled SSIDs? (yes/no, or 'q' to quit): ").strip().lower()
        if show_only_enabled == 'q':
            quit_program()
        show_only_enabled = show_only_enabled == "yes"
        
        # Ask the user if they want to view only SSIDs with RADIUS servers
        show_only_radius = input("Do you want to view only SSIDs with RADIUS servers? (yes/no, or 'q' to quit): ").strip().lower()
        if show_only_radius == 'q':
            quit_program()
        show_only_radius = show_only_radius == "yes"
        
        # Display and save SSID configurations
        display_and_save_ssids(sorted_networks, api_key, show_only_enabled, show_only_radius)

if __name__ == "__main__":
    main()
