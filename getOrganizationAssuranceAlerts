"""
https://jamiegprice.substack.com/ with Gemini

The provided script uses the Cisco Meraki API to interact with Meraki's cloud-managed network devices. Here are the specific API endpoints used in the script:

Organizations API:

Endpoint: https://api.meraki.com/api/v1/organizations
Purpose: Retrieves a list of organizations associated with the provided API key.
Alerts API:

Endpoint: https://api.meraki.com/api/v1/organizations/{org_id}/assurance/alerts
Purpose: Retrieves a list of alerts for the specified organization.
These APIs are used to gather information about organizations and alerts, which are then displayed in the terminal and written to an Excel spreadsheet.
"""



import requests
from datetime import datetime
import openpyxl
import sys

BASE_URL = 'https://api.meraki.com/api/v1/'

def get_api_key():
    try:
        api_key = input("Enter your Meraki API key: ")
        return api_key
    except EOFError:
        print("Error: No API key provided.")
        sys.exit(1)

def get_organizations(api_key):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + 'organizations', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_organizations(organizations):
    print("Organizations:")
    for idx, org in enumerate(organizations, 1):
        print(f"{idx}. {org['name']} (ID: {org['id']})")
    print()

def select_organization(organizations):
    if len(organizations) == 1:
        print(f"Only one organization found: {organizations[0]['name']} (ID: {organizations[0]['id']})")
        return organizations[0]['id']
    else:
        try:
            org_idx = int(input("Enter the number of the organization: "))
        except ValueError:
            print("Invalid input. Please enter a number.")
            sys.exit(1)
        except IndexError:
            print("Invalid organization number.")
            sys.exit(1)
        return organizations[org_idx - 1]['id']

def get_alerts(api_key, org_id):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + f'organizations/{org_id}/assurance/alerts', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def write_to_spreadsheet(alerts, filename="meraki_alerts.xlsx"):
    workbook = openpyxl.Workbook()
    sheet = workbook.active

    # Write the title and timestamp in the first row
    now = datetime.now()
    timestamp = now.strftime("%Y%m%d_%H%M%S")
    sheet.cell(row=1, column=1, value="Meraki Alerts")
    sheet.cell(row=1, column=2, value=f"Timestamp: {timestamp}")

    row_num = 2
    if alerts:
        # Process the alerts to extract the values we want
        processed_alerts = []
        for alert in alerts:
            row_data = {}
            for key, value in alert.items():
                if isinstance(value, dict):
                    # If the value is a dictionary, extract some key information (e.g., 'id', 'name')
                    # You may need to adjust this based on the structure of your alert data
                    row_data[key] = str(value.get('id', 'N/A')) + " " + str(value.get('name', 'N/A'))
                else:
                    row_data[key] = str(value)  # Convert other values to strings
            processed_alerts.append(row_data)

        # Write the processed data to the spreadsheet
        headers = list(processed_alerts[0].keys())
        sheet.append(headers)

        for alert in processed_alerts:
            row = [alert.get(header) for header in headers]
            sheet.append(row)
    else:
        sheet.cell(row=row_num, column=1, value="No alerts found.")

    workbook.save(filename)
    print(f"Data written to {filename}")

def main():
    api_key = get_api_key()
    organizations = get_organizations(api_key)
    if not organizations:
        return

    display_organizations(organizations)

    if len(organizations) == 1:
        selected_org_id = organizations[0]['id']
        print(f"Only one organization found. Auto-selecting: {organizations[0]['name']}")
    else:
        selected_org_id = select_organization(organizations)

    alerts = get_alerts(api_key, selected_org_id)

    # Generate filename with timestamp
    now = datetime.now()
    timestamp = now.strftime("%Y%m%d_%H%M%S")
    filename = f"meraki_alerts_{timestamp}.xlsx"

    if alerts:
        write_to_spreadsheet(alerts, filename)
    else:
        print("No alerts to write to spreadsheet.")

if __name__ == "__main__":
    main()
