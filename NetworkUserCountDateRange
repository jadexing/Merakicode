"""
/organizations/{organizationId}/networks
Step 1: User enters their Meraki API key.
Step 2: If only one organization exists, it is selected automatically. Otherwise, the user chooses one from the list.
Step 3: The user is asked whether to process all networks or just one.
Step 4: The user enters a start and end date to define the range for which to fetch unique client data.
Step 5: The script fetches the unique client data for the selected networks and date range.
Step 6: The script displays the number of unique clients per network.
Step 7: The total number of unique clients is displayed.
Step 8: All this data is saved into an Excel file.

This created a new file. The file name is simply: meraki_unique_client_counts.xlsx
If the script is run, and the file already exists, it adds a tab.

(Idea is to run this monthly and add a tab for each month run).

Twitter @jamiegprice https://jamiegprice.substack.com/ CWNE #510
"""

import requests
import time
import pandas as pd
import os
from datetime import datetime

# Function to retrieve live clients from a specific network with pagination
def get_live_clients(api_key, network_id):
    url = f"https://api.meraki.com/api/v1/networks/{network_id}/clients"
    headers = {"X-Cisco-Meraki-API-Key": api_key}
    params = {"perPage": 100}
    clients_list = []

    while True:
        response = requests.get(url, headers=headers, params=params)
        if response.status_code == 200:
            clients_data = response.json()
            clients_list.extend(client for client in clients_data if client.get('status') == 'Online')
            if 'next' in response.links:
                url = response.links['next']['url']
                time.sleep(0.5)  # Throttle the requests to avoid rate-limiting
            else:
                break
        else:
            print(f"Error: Unable to fetch clients for Network ID: {network_id}")
            break

    return clients_list

# Function to retrieve unique clients within a specific date range (start date to end date)
def get_unique_clients(api_key, network_id, start_date, end_date):
    url = f"https://api.meraki.com/api/v1/networks/{network_id}/clients"
    headers = {"X-Cisco-Meraki-API-Key": api_key}
    params = {
        "perPage": 100,
        "timespan": int((end_date - start_date).total_seconds())  # Timespan in seconds
    }
    clients_list = []

    while True:
        response = requests.get(url, headers=headers, params=params)
        if response.status_code == 200:
            clients_data = response.json()
            clients_list.extend(client['mac'] for client in clients_data)
            if 'next' in response.links:
                url = response.links['next']['url']
                time.sleep(0.5)  # Throttle the requests to avoid rate-limiting
            else:
                break
        else:
            print(f"Error: Unable to fetch unique clients for Network ID: {network_id}")
            break

    return list(set(clients_list))  # Ensure unique clients by using a set

# Meraki API Key input
api_key = input("Enter your Meraki API key: ")

# Retrieve organizations associated with the API key
url = "https://api.meraki.com/api/v1/organizations"
headers = {"X-Cisco-Meraki-API-Key": api_key}
response = requests.get(url, headers=headers)

if response.status_code == 200:
    orgs_data = response.json()

    # Automatically select the first org if only one exists
    if len(orgs_data) == 1:
        print("\nOnly one organization found, auto-selecting.")
        org_number = orgs_data[0]['id']  # Automatically select the organization
    else:
        # Ask user to select the organization
        print("\nOrganizations associated with your API key:")
        for index, org in enumerate(orgs_data, start=1):
            print(f"{index}. {org['name']} (Organization ID: {org['id']})")

        while True:
            try:
                org_number = int(input("\nEnter the number of the organization you want to use: "))
                if 0 < org_number <= len(orgs_data):
                    org_number = orgs_data[org_number - 1]['id']
                    break
                else:
                    print("Invalid input. Please enter a valid number.")
            except ValueError:
                print("Invalid input. Please enter a valid number.")

    # Retrieve and display the networks associated with the selected organization
    url = f"https://api.meraki.com/api/v1/organizations/{org_number}/networks"
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        networks_data = response.json()
        print("\nNetworks associated with the organization:")
        for index, network in enumerate(networks_data, start=1):
            print(f"{index}. {network['name']} (Network ID: {network['id']})")

        # Ask the user if they want to process all networks or just one
        while True:
            all_networks = input("\nDo you want to process all networks? (y/n): ").strip().lower()
            if all_networks in ['y', 'n']:
                break
            else:
                print("Invalid input. Please enter 'y' for yes or 'n' for no.")

        # If user selects 'n', ask to choose a network by index number
        if all_networks == 'n':
            while True:
                try:
                    selected_network = int(input("\nEnter the index number of the network you want to process: "))
                    if 0 < selected_network <= len(networks_data):
                        network_id = networks_data[selected_network - 1]['id']
                        network_name = networks_data[selected_network - 1]['name']
                        break
                    else:
                        print("Invalid input. Please enter a valid index number.")
                except ValueError:
                    print("Invalid input. Please enter a valid index number.")

        # Date range input
        print("\nPlease enter the date range for unique clients.")
        start_date_str = input("Enter start date (MM-DD-YYYY): ")
        end_date_str = input("Enter end date (MM-DD-YYYY): ")

        # Convert date strings to datetime objects
        start_date = datetime.strptime(start_date_str, "%m-%d-%Y")
        end_date = datetime.strptime(end_date_str, "%m-%d-%Y")
        
        # Warning about the time it will take to gather data
        print("\nIt will take some time to gather this data. Please wait.")

        # Initialize dictionaries to store client counts
        unique_clients_per_network = {}
        total_unique_clients = 0

        if all_networks == 'y':
            # Process all networks
            for network in networks_data:
                network_id = network['id']
                network_name = network['name']
                print(f"\nProcessing unique clients for network: {network_name}")
                unique_clients = get_unique_clients(api_key, network_id, start_date, end_date)
                unique_clients_per_network[network_name] = len(unique_clients)
                total_unique_clients += len(unique_clients)
                print(f"{network_name}: Unique Clients - {len(unique_clients)}")
        else:
            # Process one network selected by the user
            print(f"\nProcessing unique clients for network: {network_name}")
            unique_clients = get_unique_clients(api_key, network_id, start_date, end_date)
            unique_clients_per_network[network_name] = len(unique_clients)
            total_unique_clients += len(unique_clients)
            print(f"{network_name}: Unique Clients - {len(unique_clients)}")

        # Display total unique client count
        print("\nTotal Unique Clients:", total_unique_clients)

        # Prepare data to be saved
        df = pd.DataFrame(list(unique_clients_per_network.items()), columns=['Network', 'Unique Clients Count'])
        
        # Add the date and time of the run as a column in the DataFrame
        current_date_time = datetime.now().strftime("%Y-%m-%d_%H-%M")  # Format the date and time as YYYY-MM-DD_HH-MM
        df['Date and Time of Run'] = current_date_time

        # Check if the file already exists
        file_name = "meraki_unique_client_counts.xlsx"
        if os.path.exists(file_name):
            # If the file exists, load the existing Excel file and add a new sheet with the current date and time
            with pd.ExcelWriter(file_name, engine='openpyxl', mode='a') as writer:
                df.to_excel(writer, sheet_name=current_date_time, index=False)
            print(f"\nData added to existing file with sheet name '{current_date_time}'")
        else:
            # If the file doesn't exist, create a new one with the data
            df.to_excel(file_name, index=False)
            print("\nData saved to new file 'meraki_unique_client_counts.xlsx'")

    else:
        print("Unable to fetch networks. Please check your API key and organization number.")
else:
    print("Unable to fetch organizations. Please check your API key.")
