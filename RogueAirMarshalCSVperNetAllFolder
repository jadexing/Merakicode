#API  https://developer.cisco.com/meraki/api-v1/get-network-wireless-air-marshal/
#Code asks for your API key and lets you select a network for SSIDs seen (Air Marshal Data).
#Can print one Network, or all into one spreadsheet per Network, into a folder.
#Comes with a second file to count the times the times a unique rogue appears.
#Twitter @jamiegprice https://jamiegprice.substack.com/

import requests
import datetime
import csv
import os
from collections import defaultdict

BASE_URL = 'https://api.meraki.com/api/v1/'

def get_api_key():
    return input("Enter your Meraki API key: ")

def get_organizations(api_key):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + 'organizations', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_organizations(organizations):
    print("\n=== Organization Selection ===")
    for idx, org in enumerate(organizations):
        print(f"{idx}. {org['name']} (ID: {org['id']})")
    print("\n")

def select_organization(organizations):
    if len(organizations) == 1:
        print(f"Only one organization found: {organizations[0]['name']} (ID: {organizations[0]['id']})")
        return organizations[0]['id']
    else:
        org_idx = int(input("Enter the number of the organization: "))
        return organizations[org_idx]['id']

def get_networks(api_key, org_id):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + f'organizations/{org_id}/networks', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_networks(networks):
    print("\n=== Network Selection ===")
    sorted_networks = sorted(networks, key=lambda x: x['name'].lower())
    for idx, network in enumerate(sorted_networks):
        print(f"{idx}. {network['name']} (ID: {network['id']})")
    print("\n")
    return sorted_networks

def select_network(networks):
    network_input = input("Please Enter the number of the network, or <Enter> for all networks: ")
    if network_input == "":
        return [network['id'] for network in networks]
    else:
        network_idx = int(network_input)
        return [networks[network_idx]['id']]

def get_air_marshal_data(api_key, network_id):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + f'networks/{network_id}/wireless/airMarshal', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def time_ago(timestamp):
    if not timestamp:
        return "Unknown"
    if isinstance(timestamp, int):
        timestamp = datetime.datetime.utcfromtimestamp(timestamp)
    
    now = datetime.datetime.utcnow()
    diff = now - timestamp
    seconds = int(diff.total_seconds())
    if seconds < 60:
        return f"{seconds} seconds ago"
    elif seconds < 3600:
        return f"{seconds // 60} minutes ago"
    elif seconds < 86400:
        return f"{seconds // 3600} hours ago"
    elif seconds < 31536000:
        return f"{seconds // 86400} days ago"
    else:
        return f"{seconds // 31536000} years ago"

def save_to_csv(data, network_name, folder_path):
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    csv_filename = os.path.join(folder_path, f"Rogues_{network_name}_{timestamp}.csv")
    
    with open(csv_filename, 'w', newline='', encoding='utf-8') as csv_file:
        filtered_data = [entry for entry in data if entry.get("wiredMacs")]
        if filtered_data:
            fieldnames = ['Network Name'] + list(filtered_data[0].keys())
            writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
            writer.writeheader()
            
            for entry in filtered_data:
                entry["lastSeen"] = time_ago(entry.get("lastSeen"))
                entry["firstSeen"] = time_ago(entry.get("firstSeen"))
                entry["wiredLastSeen"] = time_ago(entry.get("wiredLastSeen"))
                entry["Network Name"] = network_name
                writer.writerow(entry)
    
    print(f"Air Marshal data saved to {csv_filename}")

def display_air_marshal_data(data):
    print("\n=== Air Marshal Data ===")
    for entry in data:
        if entry.get("wiredMacs"):
            print("\n--- Entry ---")
            print(f"SSID: {entry.get('ssid')}")
            print(f"BSSIDs: {entry.get('bssids')}")
            print(f"Channels: {entry.get('channels')}")
            print(f"First Seen: {time_ago(entry.get('firstSeen'))}")
            print(f"Last Seen: {time_ago(entry.get('lastSeen'))}")
            print(f"Wired MACs: {entry.get('wiredMacs')}")
            print(f"Wired VLANs: {entry.get('wiredVlans')}")
            print(f"Wired Last Seen: {time_ago(entry.get('wiredLastSeen'))}")
            print(f"RSSI: {entry.get('rssi')}")
            print(f"Type: {entry.get('type')}")
            print("-------------------------")
    print("\n")

def save_network_count(network_counts, folder_path):
    count_filename = os.path.join(folder_path, "network_counts.csv")
    with open(count_filename, 'w', newline='', encoding='utf-8') as csv_file:
        writer = csv.writer(csv_file)
        writer.writerow(["Network Name", "Count with Wired MACs"])
        for network_name, count in network_counts.items():
            print(f"{network_name}: {count} entries with Wired MACs")
            writer.writerow([network_name, count])
    print(f"\nNetwork counts saved to {count_filename}\n")

def main():
    start_time = datetime.datetime.now()
    api_key = get_api_key()
    organizations = get_organizations(api_key)
    if not organizations:
        return
    display_organizations(organizations)
    selected_org_id = select_organization(organizations)
    networks = get_networks(api_key, selected_org_id)
    if not networks:
        return
    sorted_networks = display_networks(networks)
    selected_network_ids = select_network(sorted_networks)

    folder_timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    folder_path = f"Rogues_{folder_timestamp}"
    os.makedirs(folder_path, exist_ok=True)
    
    network_counts = defaultdict(int)
    
    for network_id in selected_network_ids:
        air_marshal_data = get_air_marshal_data(api_key, network_id)
        network_name = next(network['name'] for network in sorted_networks if network['id'] == network_id)
        if air_marshal_data:
            display_air_marshal_data(air_marshal_data)
            save_to_csv(air_marshal_data, network_name, folder_path)
            
            # Count entries with data in wiredMacs
            count_with_wired_macs = sum(1 for entry in air_marshal_data if entry.get("wiredMacs"))
            network_counts[network_name] += count_with_wired_macs

    # Save network counts to CSV in the folder
    save_network_count(network_counts, folder_path)

    end_time = datetime.datetime.now()
    duration = end_time - start_time
    duration_minutes = duration.total_seconds() / 60
    print(f"Job completed in {duration_minutes:.2f} minutes.")

if __name__ == "__main__":
    main()
