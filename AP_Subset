"""
This starter code is designed to interact with the Meraki API to list networks within an organization in alphabetical order and display the time taken to run the job. Here's a breakdown of what it does:

Get API Key: It prompts the user to enter their Meraki API key.
Get Organizations: It makes an API call to retrieve a list of organizations associated with the provided API key and sorts them alphabetically by name.
Display Organizations: It prints the list of organizations to the screen.
Select Organization: If there is more than one organization, it prompts the user to select one.
Get Networks: It makes another API call to retrieve a list of networks within the selected organization and sorts them alphabetically by name.
Display Networks: It prints the list of networks to the screen.
Select Network: It prompts the user to select a network from the list.
Display Selected Network: It prints the name of the selected network.
Calculate Job Duration: It calculates and prints the duration of the job in minutes and seconds.
The APIs it pulls from are:

Organizations API: https://api.meraki.com/api/v1/organizations
Networks API: https://api.meraki.com/api/v1/organizations/{org_id}/networks

#This is starter code listing networks in alpahbetical order and time displayed on how long it took to run the job.
# https://jamiegprice.substack.com/
"""

import requests
from datetime import datetime

BASE_URL = 'https://api.meraki.com/api/v1/'

def get_api_key():
    return input("Enter your Meraki API key: ")

def get_organizations(api_key):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + 'organizations', headers=headers)
        response.raise_for_status()
        return sorted(response.json(), key=lambda x: x['name'])  # Sort organizations alphabetically
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_organizations(organizations):
    print("Organizations:")
    for idx, org in enumerate(organizations, 1):
        print(f"{idx}. {org['name']} (ID: {org['id']})")
    print()

def get_networks(api_key, org_id):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + f'organizations/{org_id}/networks', headers=headers)
        response.raise_for_status()
        return sorted(response.json(), key=lambda x: x['name'])  # Sort networks alphabetically
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_networks(networks):
    print("Networks:")
    for idx, network in enumerate(networks, 1):
        print(f"{idx}. {network['name']} (ID: {network['id']})")
    print()

def get_time_taken(start_time):
    end_time = datetime.now()
    duration = end_time - start_time
    minutes = duration.seconds // 60
    seconds = duration.seconds % 60
    return minutes, seconds

def main():
    start_time = datetime.now()  # Start timer
    api_key = get_api_key()
    organizations = get_organizations(api_key)

    if organizations:
        if len(organizations) == 1:
            selected_org_id = organizations[0]['id']
            print(f"Automatically selected organization: {organizations[0]['name']} (ID: {selected_org_id})")
        else:
            display_organizations(organizations)
            org_choice = int(input("Please enter the number of your organization: "))
            selected_org_id = organizations[org_choice - 1]['id']

        networks = get_networks(api_key, selected_org_id)

        if networks:
            display_networks(networks)
            network_choice = int(input("Please enter the number of your network: "))
            selected_network = networks[network_choice - 1]
            
            print(f"\nSelected Network: {selected_network['name']}")
            print("Thank you, I am starter code. Build on top of this starter code, and have a nice day.")

    minutes, seconds = get_time_taken(start_time)
    print(f"\nTime taken: {minutes} minutes and {seconds} seconds")

if __name__ == "__main__":
    main()
