#This code takes the API key, displays the org
#Choose the org, networks are displayed.
#Choose a network
#Display APs for the network
#Chose a subset of APs


import requests

BASE_URL = 'https://api.meraki.com/api/v1/'

def get_api_key():
    return input("Enter your Meraki API key: ")

def get_organizations(api_key):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + 'organizations', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_organizations(organizations):
    print("Organizations:")
    for idx, org in enumerate(organizations, 1):
        print(f"{idx}. {org['name']} (ID: {org['id']})")
    print()

def get_networks(api_key, org_id):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + f'organizations/{org_id}/networks', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_networks(networks):
    print("Networks:")
    for idx, network in enumerate(networks, 1):
        print(f"{idx}. {network['name']} (ID: {network['id']})")
    print()

def get_access_points(api_key, network_id):
    headers = {
        'X-Cisco-Meraki-API-Key': api_key,
    }
    try:
        response = requests.get(BASE_URL + f'networks/{network_id}/devices', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_access_points(aps):
    print("Access Points:")
    for idx, ap in enumerate(aps, 1):
        print(f"{idx}. {ap['name']} (Serial: {ap['serial']})")

def search_access_points(aps, search_query):
    matching_aps = []
    for ap in aps:
        if search_query.lower() in ap['name'].lower():
            matching_aps.append(ap)
    return matching_aps

def main():
    api_key = get_api_key()
    organizations = get_organizations(api_key)

    if organizations:
        display_organizations(organizations)
        org_choice = int(input("Please enter the number of your organization: "))
        selected_org_id = organizations[org_choice - 1]['id']

        networks = get_networks(api_key, selected_org_id)

        if networks:
            display_networks(networks)
            network_choice = int(input("Please enter the number of your network: "))
            selected_network_id = networks[network_choice - 1]['id']

            access_points = get_access_points(api_key, selected_network_id)

            if access_points:
                display_access_points(access_points)
                search_query = input("Enter a search query to match AP names (case-insensitive): ")
                matching_aps = search_access_points(access_points, search_query)
                if matching_aps:
                    print("Matching Access Points:")
                    display_access_points(matching_aps)
                else:
                    print("No matching Access Points found.")

if __name__ == "__main__":
    main()
