"""
APIs
Endpoint: GET /organizations
Endpoint: GET /organizations/{organizationId}/networks
Endpoint: GET /networks/{networkId}/wireless/airMarshal
Purpose: Retrieves rogue device data (Air Marshal data) for a specified network.
This script provides a comprehensive tool for network administrators using Meraki to monitor rogue devices in their environment. 
By summarizing the Air Marshal data and excluding less relevant information like BSSIDs, the script makes it easier to focus on 
essential security metrics and counts for network management.

#Twitter @jamiegprice https://jamiegprice.substack.com/
"""

import requests
import datetime
import csv
import os
from collections import Counter

BASE_URL = 'https://api.meraki.com/api/v1/'

def get_api_key():
    return input("Enter your Meraki API key: ")

def get_organizations(api_key):
    headers = {'X-Cisco-Meraki-API-Key': api_key}
    try:
        response = requests.get(BASE_URL + 'organizations', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_organizations(organizations):
    print("Organizations:")
    for idx, org in enumerate(organizations):
        print(f"{idx}. {org['name']} (ID: {org['id']})")
    print()

def select_organization(organizations):
    if len(organizations) == 1:
        print(f"Only one organization found: {organizations[0]['name']} (ID: {organizations[0]['id']})")
        return organizations[0]['id']
    else:
        org_idx = int(input("Enter the number of the organization: "))
        return organizations[org_idx]['id']

def get_networks(api_key, org_id):
    headers = {'X-Cisco-Meraki-API-Key': api_key}
    try:
        response = requests.get(BASE_URL + f'organizations/{org_id}/networks', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def display_networks(networks):
    print("Networks:")
    sorted_networks = sorted(networks, key=lambda x: x['name'].lower())
    for idx, network in enumerate(sorted_networks):
        print(f"{idx}. {network['name']} (ID: {network['id']})")
    print()
    return sorted_networks

def select_network(networks):
    network_input = input("Please Enter the number of the network, or <Enter> for all networks: ")
    if network_input == "":
        return [network['id'] for network in networks]
    else:
        network_idx = int(network_input)
        return [networks[network_idx]['id']]

def get_air_marshal_data(api_key, network_id):
    headers = {'X-Cisco-Meraki-API-Key': api_key}
    try:
        response = requests.get(BASE_URL + f'networks/{network_id}/wireless/airMarshal', headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error occurred during API call: {e}")
        return []

def time_ago(timestamp):
    if not timestamp:
        return "Unknown"
    if isinstance(timestamp, int):
        timestamp = datetime.datetime.utcfromtimestamp(timestamp)
    now = datetime.datetime.utcnow()
    diff = now - timestamp
    seconds = int(diff.total_seconds())
    if seconds < 60:
        return f"{seconds} seconds ago"
    elif seconds < 3600:
        return f"{seconds // 60} minutes ago"
    elif seconds < 86400:
        return f"{seconds // 3600} hours ago"
    elif seconds < 31536000:
        return f"{seconds // 86400} days ago"
    else:
        return f"{seconds // 31536000} years ago"

def save_to_csv(all_data):
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    csv_filename = f"Rogues_Data_{timestamp}.csv"
    file_exists = os.path.isfile(csv_filename)
    
    with open(csv_filename, 'a', newline='', encoding='utf-8') as csv_file:
        fieldnames = ['Network Name'] + list(all_data[0].keys())
        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
        
        if not file_exists:
            writer.writeheader()
            
        for entry in all_data:
            writer.writerow(entry)
    
    print(f"\nAir Marshal data saved to {csv_filename}")

def save_summarized_csv(all_data):
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    summarized_csv_filename = f"Summarized_Spreadsheet_{timestamp}.csv"
    file_exists = os.path.isfile(summarized_csv_filename)
    
    with open(summarized_csv_filename, 'a', newline='', encoding='utf-8') as csv_file:
        # Filter out `bssids` from the data
        fieldnames = ['Network Name'] + [key for key in all_data[0].keys() if key != 'bssids']
        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
        
        if not file_exists:
            writer.writeheader()
            
        for entry in all_data:
            # Remove 'bssids' from each entry
            entry_copy = {k: v for k, v in entry.items() if k != 'bssids'}
            writer.writerow(entry_copy)
    
    print(f"\nSummarized Air Marshal data saved to {summarized_csv_filename}")

def save_mac_counts(mac_counts):
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    csv_filename = f"Mac_Counts_{timestamp}.csv"
    with open(csv_filename, 'w', newline='', encoding='utf-8') as csv_file:
        writer = csv.writer(csv_file)
        writer.writerow(["Network Name", "Wired MAC Count"])
        for network_name, count in mac_counts.items():
            writer.writerow([network_name, count])
    print(f"MAC count summary saved to {csv_filename}")

def display_mac_counts(mac_counts):
    print("\nWired MAC Counts by Network:")
    for network_name, count in mac_counts.items():
        print(f"{network_name}: {count}")

def main():
    start_time = datetime.datetime.now()
    api_key = get_api_key()
    organizations = get_organizations(api_key)
    if not organizations:
        return
    display_organizations(organizations)
    selected_org_id = select_organization(organizations)
    networks = get_networks(api_key, selected_org_id)
    if not networks:
        return
    sorted_networks = display_networks(networks)
    selected_network_ids = select_network(sorted_networks)

    all_data = []
    mac_counter = Counter()

    for network_id in selected_network_ids:
        air_marshal_data = get_air_marshal_data(api_key, network_id)
        network_name = next(network['name'] for network in sorted_networks if network['id'] == network_id)
        
        filtered_data = [entry for entry in air_marshal_data if entry.get("wiredMacs")]
        for entry in filtered_data:
            entry["Network Name"] = network_name
            entry["lastSeen"] = time_ago(entry.get("lastSeen"))
            entry["firstSeen"] = time_ago(entry.get("firstSeen"))
            entry["wiredLastSeen"] = time_ago(entry.get("wiredLastSeen"))
            all_data.append(entry)
            mac_counter[network_name] += len(entry.get("wiredMacs", []))
            
            # Print each entry to the terminal
            print(f"\nData for Network '{network_name}':")
            for key, value in entry.items():
                print(f"{key}: {value}")
            print("-" * 50)

    save_to_csv(all_data)
    save_summarized_csv(all_data)
    save_mac_counts(mac_counter)
    display_mac_counts(mac_counter)

    end_time = datetime.datetime.now()
    duration = end_time - start_time
    print(f"\nJob completed in {duration.total_seconds() / 60:.2f} minutes.")

if __name__ == "__main__":
    main()
