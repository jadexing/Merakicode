##Jamieinbox - Wi-Fi Cool Cats https://jamiegprice.substack.com/ CWNE #510
#This code will display PSK SSID per Network and generate a randomized password for you.
#Authored by Jamie Price- Wi-Fi Cool Cats with ChatGPT.


import requests
import random
import string

BASE_URL = "https://api.meraki.com/api/v1"

def get_organizations(api_key):
    headers = {
        "X-Cisco-Meraki-API-Key": api_key
    }
    url = f"{BASE_URL}/organizations"
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        print("Failed to fetch organizations.")
        return None

def get_networks(api_key, organization_id):
    headers = {
        "X-Cisco-Meraki-API-Key": api_key
    }
    url = f"{BASE_URL}/organizations/{organization_id}/networks"
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        print("Failed to fetch networks.")
        return None

def get_ssids(api_key, network_id):
    headers = {
        "X-Cisco-Meraki-API-Key": api_key
    }
    url = f"{BASE_URL}/networks/{network_id}/wireless/ssids"
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        print("Failed to fetch SSIDs.")
        return None

def set_ssid_password(api_key, network_id, ssid_number, new_password):
    headers = {
        "X-Cisco-Meraki-API-Key": api_key,
        "Content-Type": "application/json"
    }
    url = f"{BASE_URL}/networks/{network_id}/wireless/ssids/{ssid_number}"
    payload = {
        "authMode": "psk",
        "wpaEncryptionMode": "WPA2 only",  # Setting WPA2 encryption mode
        "psk": new_password
    }
    response = requests.put(url, headers=headers, json=payload)

    if response.status_code == 200:
        print("Password updated successfully.")
    else:
        print("Failed to update password.")
        print(response.text)

def show_all_ssids(api_key, networks):
    print("\nAll SSIDs with PSK authentication:")
    for network in networks:
        ssids = get_ssids(api_key, network['id'])
        for ssid in ssids:
            if ssid.get('authMode') == 'psk':
                print(f"Network Name: {network['name']}, SSID Name: {ssid['name']}")
    print()

def main():
    api_key = input("Please enter your Meraki API key: ")
    organizations = get_organizations(api_key)

    if organizations:
        print("Organizations:")
        for index, org in enumerate(organizations, 1):
            print(f"{index}. {org['name']}")

        chosen_org_index = int(input("Enter the number of the organization: ")) - 1
        chosen_org_id = organizations[chosen_org_index]['id']

        networks = get_networks(api_key, chosen_org_id)
        if networks:
            print("\nNetworks:")
            for index, network in enumerate(networks, 1):
                print(f"{index}. {network['name']}")

            chosen_network_index = int(input("Enter the number of the network to view SSIDs (enter 0 to view all SSIDs): ")) - 1
            if chosen_network_index >= 0:
                chosen_network_id = networks[chosen_network_index]['id']
                ssids = get_ssids(api_key, chosen_network_id)
                if ssids:
                    print("\nSSIDs with PSK authentication:")
                    for ssid in ssids:
                        if ssid.get('authMode') == 'psk':
                            print(f"SSID Name: {ssid['name']}")
                    print()
                else:
                    print("No SSIDs found for the chosen network.")
            else:
                show_all_ssids(api_key, networks)
                selected_network_name = input("Enter the name of the Network you want to select (type 'all' to show all SSIDs): ")

                if selected_network_name.lower() == 'all':
                    show_all_ssids(api_key, networks)
                else:
                    # Find the selected network
                    selected_network = next((network for network in networks if network['name'] == selected_network_name), None)

                    if selected_network:
                        chosen_network_id = selected_network['id']
                        ssids = get_ssids(api_key, chosen_network_id)
                        if ssids:
                            print("\nSSIDs with PSK authentication:")
                            for ssid in ssids:
                                if ssid.get('authMode') == 'psk':
                                    print(f"SSID Name: {ssid['name']}")
                            print()
                        else:
                            print("No SSIDs found for the chosen network.")
                    else:
                        print(f"No network with name '{selected_network_name}' found in the selected organization.")
        else:
            print("No networks found for the chosen organization.")
    else:
        print("No organizations found. Please check your API key.")

    selected_ssid_name = input("Select the SSID you want to generate a new random password (type 'all' to show all SSIDs): ")

    if selected_ssid_name.lower() == 'all':
        show_all_ssids(api_key, networks)
    else:
        # Find the selected SSID in the list
        selected_ssid = None
        for network in networks:
            ssids = get_ssids(api_key, network['id'])
            for ssid in ssids:
                if ssid.get('authMode') == 'psk' and ssid['name'] == selected_ssid_name:
                    selected_ssid = ssid
                    print(f"Network Name: {network['name']}, SSID Name: {ssid['name']}")
                    break

        if selected_ssid:
            set_password_option = input("Would you like to set a new randomized password for this SSID? (Yes or No): ").lower()
            if set_password_option == 'yes':
                new_password = generate_random_password()
                print(f"New password: {new_password}")
                set_ssid_password(api_key, chosen_network_id, selected_ssid['number'], new_password)
            elif set_password_option == 'no':
                print("End of data.")
            else:
                print("Invalid option. Please choose 'Yes' or 'No'.")
        else:
            print(f"No SSID with name '{selected_ssid_name}' found in the selected network.")

def generate_random_password():
    characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(characters) for _ in range(10))

if __name__ == "__main__":
    main()
